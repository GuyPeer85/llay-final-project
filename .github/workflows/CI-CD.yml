name: CI-CD

# TODO: 5. For branch develop, the deploy is done automatically on pull request while for
# branch master the deploy is done by running the workflow manually.
on:
  workflow_call:
    inputs:
      infa_env:
        required: true
        type: string
    # secrets:
    #   username:
    #     required: true
    #   password:
    #     required: true
        
jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3
        
    # TODO: 1. Connect to k8s cluster + private docker registry
      - name: Login to private docker registry
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # - name: Install Helm
      #   uses: azure/setup-helm@v3
        
      # - name: Create k8s Kind Cluster
      #   uses: helm/kind-action@v1.4.0
      #- name: Connect to k8s cluster
      #  uses: medyagh/setup-minikube@master

      # - name: Install yq
      #   run: |
      #     sudo add-apt-repository ppa:rmescandon/yq
      #     sudo apt update
      #     sudo apt install yq -y
      #     echo 

      # - name: Try the cluster
      #   run: kubectl get pods -A

      # TODO: 2. Create docker image (nginx web server + php-fpm with index.php inside)
      - name: Create & tag docker image (nginx web server + php-fpm with index.php inside)
        run: |
          docker build --file Dockerfile --tag php-web:${{ inputs.infa_env }} .
          docker tag php-web:${{ inputs.infa_env }} guypeeril/php-web:${{ inputs.infa_env }}

      # TODO: 3. Upload the image to the docker registry.
      - name: Upload the image to the docker registry.
        run: |
          docker push guypeeril/php-web:${{ inputs.infa_env }}

      # TODO: 4. Pull the image from the docker registry
      - name: Pull Docker image
        run: |
          docker pull guypeeril/php-web:${{ inputs.infa_env }}

      - name: Replace Image Tag
        run: |
          sed -i "s/image: guypeeril\/php-web:.*/image: guypeeril\/php-web:${{ inputs.infa_env }}/" deployment.yaml

      # deploy it to the kubernetes cluster
      - name: Public IP
        id: ip
        uses: haythem/public-ip@v1.3
      
      - name: Print Public IP
        run: |
          echo ${{ steps.ip.outputs.ipv4 }}
          echo ${{ steps.ip.outputs.ipv6 }}
      
      - name: Set up Kubectl
        run: |
          VERSION=$(curl --silent https://storage.googleapis.com/kubernetes-release/release/stable.txt)
          curl https://storage.googleapis.com/kubernetes-release/release/$VERSION/bin/linux/amd64/kubectl \
            --location --remote-name --progress-bar
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/

      - name: Set up Kubernetes config
        run: |
          echo "${{ secrets.KUBECONFIG }}" | base64 --decode > kubeconfig.yaml
          echo "KUBECONFIG=$(pwd)/kubeconfig.yaml" >> $GITHUB_ENV
      
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f deployment.yaml

      # - name: Deploy to the kukbernetes
      #   run: |
      #     kubectl apply -f deployment.yaml
      #     sleep 120
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f deployment.yaml

      # New step: Install ngrok
      - name: Install ngrok
        run: |
          wget https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip
          unzip ngrok-stable-linux-amd64.zip
          sudo mv ngrok /usr/local/bin/

      # New step: Expose service using kubectl port-forward
      - name: Expose service using kubectl port-forward
        run: |
          kubectl port-forward service/myservice 8080:80 &

      # New step: Expose local port to the internet using ngrok
      - name: Expose local port to the internet using ngrok
        run: |
          ngrok authtoken ${{ secrets.NGROK_AUTH_TOKEN }}
          ngrok http 8080 > /dev/null &

      # New step: Get the public URL from ngrok
      - name: Get the public URL from ngrok
        id: ngrok
        run: |
          sleep 5
          curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url' > ngrok_url.txt
          NGROK_URL=$(cat ngrok_url.txt)
          echo "NGROK_URL=$NGROK_URL" >> $GITHUB_ENV

      - name: Print ngrok public URL
        run: |
          echo "ngrok public URL: $NGROK_URL"

      - name: Try the cluster
        run: |
          kubectl get all
          kubectl get pods -A
          kubectl get nodes -o wide
      
      - name: Wait indefinitely until manually stop the workflow
        run: tail -f /dev/null
      

